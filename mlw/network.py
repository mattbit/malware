import random

import numpy as np

from mlw.mcmc import IsingMCMC


class InteractionNetwork:
    """Host-domain interaction network."""

    state_S = +1  # susceptible
    state_I = -1  # infected

    def __init__(self, graph, hosts, domains):
        self.graph = graph
        self.hosts = hosts
        self.domains = domains

    def configuration(self, num_malicious, interaction, T=100, num_iter=50):
        """Generate a configuration."""
        nodes = list(self.graph.nodes)
        states = np.random.choice(
            [self.state_I, self.state_S], size=len(nodes))
        init_states = {}
        fields = {}
        for node, state in zip(nodes, states):
            init_states[node] = state
            fields[node] = 0.

        degrees = dict(self.graph.degree(self.domains))
        domains_by_pop = sorted(degrees.keys(), key=degrees.get, reverse=True)

        # Popular domains are more tough targets for malware, so we add a
        # positive field to them based on their popularity.
        for node, degree in degrees.items():
            fields[node] = np.log(degree)

        # We have some malicious actors. We sample them from the half less
        # popular domains.
        n = max(num_malicious, int(len(domains_by_pop) // 2))
        malicious = random.sample(domains_by_pop[:n], num_malicious)
        for node in malicious:
            fields[node] = -np.inf

        sim = IsingMCMC(self.graph, interaction=interaction,
                        fields=fields, temperature=T)
        states, energies = sim.run(init_states, num_iter)

        return states, energies
