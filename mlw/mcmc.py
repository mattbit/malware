import random
from math import log

import numpy as np


class IsingMCMC:
    """Ising MCMC with simulated annealing."""

    def __init__(self, graph, interaction, fields, temperature):
        self.J = interaction  # interaction potential
        self.h = fields  # local fields
        self.B = 1 / temperature
        self.graph = graph

    def run(self, init_states, steps, gamma=.01):
        """Run the simulation.

        Args:
            init_states: Dictionary mapping nodes to their initial state.
            steps: Number of steps.
            temperature: Initial temperature.
            gamma: Cooling factor.

        Returns:
            The final states dictionary and the list of energies by time.
        """
        states = init_states.copy()
        beta = self.B
        energies = np.zeros(steps + 1)
        energies[0] = self.energy(states)

        nodes = list(self.graph.nodes)
        for t in range(steps):
            for node in nodes:
                state = states[node]
                nstates = [states[n] for n in self.graph.neighbors(node)]

                # Metropolisâ€“Hastings
                delta = 2 * self.J * state * np.sum(nstates) + 2 * self.h[node] * state
                if random.random() < np.exp(- beta * delta):
                    states[node] *= -1  # flip the spin

            random.shuffle(nodes)

            beta *= 1 + log(1 + gamma * t)  # simulated annealing
            energies[1 + t] = self.energy(states)

        return states, energies

    def energy(self, states):
        """Calculate the system energy."""
        E = 0
        for (u, v) in self.graph.edges:
            E -= self.J * states[u] * states[v]

        return E
