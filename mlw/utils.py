import random

import networkx as nx


def generate_bipartite_scale_free_graph(n1, n2, m):
    """Generate a scale-free bipartite graph using Albert-Barabasi algorithm.

    Args:
        n1: Number of nodes in partition A.
        n2: Number of nodes in partition B.
        m: Degree (m_0 in the original paper).

    References:
        A. L. Barabási and R. Albert “Emergence of scaling in random networks”,
        Science 286, pp 509-512, 1999.
    """
    if n1 < m or n2 < m:
        raise Exception("Both n1 and n2 must be greater than m.")

    graph = nx.complete_bipartite_graph(m, m)

    repeated_A = []
    repeated_B = []

    for node, data in graph.nodes(data=True):
        if data["bipartite"] == 0:
            repeated_A.extend([node] * m)
        else:
            repeated_B.extend([node] * m)

    new_nodes = set(range(2 * m, n1 + n2))
    nodes_A = random.sample(new_nodes, n1 - m)

    for source in new_nodes:
        if source in nodes_A:
            repeated_A.extend([source] * m)
            targets = random.sample(repeated_B, m)

            for target in targets:
                repeated_B.append(target)
                graph.add_edge(source, target)
                graph.node[source]["bipartite"] = 0
        else:
            repeated_B.extend([source] * m)
            targets = random.sample(repeated_A, m)

            for target in targets:
                repeated_A.append(target)
                graph.add_edge(source, target)
                graph.node[source]["bipartite"] = 1

    return graph
