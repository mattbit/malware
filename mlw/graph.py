import random

import networkx as nx


def generate_bipartite_scale_free(n, m, p=0.5):
    """Generate a scale-free bipartite graph using Albert-Barabasi algorithm.

    Args:
        n: Total number of nodes.
        m: Degree.
        p: Fraction of nodes in a partition.
    """
    graph = nx.complete_bipartite_graph(m, m)

    repeated_A = []
    repeated_B = []
    A, B = nx.bipartite.sets(graph)

    for node in A:
        repeated_A.extend([node] * m)
    for node in B:
        repeated_B.extend([node] * m)

    for source in range(graph.number_of_nodes(), n):
        if random.random() > p:
            A.add(source)
            repeated_A.extend([source] * m)
            targets = random.sample(repeated_B, m)

            for target in targets:
                repeated_B.append(target)
                graph.add_edge(source, target)
        else:
            B.add(source)
            repeated_B.extend([source] * m)
            targets = random.sample(repeated_A, m)

            for target in targets:
                repeated_A.append(target)
                graph.add_edge(source, target)

    return graph
