import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
import pandas as pd
import powerlaw

import mlw.plot

plt.style.use("essay")

###########################################################
# %% Load and pre-process the CTU dataset.                #
###########################################################

nf = pd.read_csv("data/ctu-13/capture20110810.binetflow")

# Keep only unidirectional TCP flows of more than 500 bytes.
nf.Dir = nf.Dir.str.strip()
nf = nf[(nf.Proto == "tcp") & (nf.TotBytes >= 500) & (nf.Dir == "->")]

# Discard the traffic between hosts in the local subnet (147.32.0.0/16).
# We only want to evaluate requests going from local hosts to the internet.
nf = nf[nf.SrcAddr.str.startswith("147.32.")
        & (~nf.DstAddr.str.startswith("147.32."))]

###########################################################
# %% Build the network graph based on the traffic flows.  #
###########################################################

flows = nf.loc[:, ("SrcAddr", "DstAddr")]
G = nx.Graph([(src, dst) for _, src, dst in flows.itertuples()])

###########################################################
# %% Let's look at the characteristics of the graph.      #
###########################################################

assert nx.is_bipartite(G)

degrees = list(dict(G.degree()).values())
fit = powerlaw.Fit(degrees, discrete=True, verbose=False)

ax = fit.plot_pdf(label="Empirical PDF")
fit.power_law.plot_pdf(color="navy", linestyle="--",
                       alpha=0.5, label="Fit")
# ax.tick_params(axis='both', which='major', labelsize=7)
ax.set_ylabel("Fraction of nodes")
ax.set_xlabel("Node degree")
ax.legend(fontsize=8)
fig = mlw.plot.set_layout(ax.get_figure(), 0.5)

print("Alpha = {:.5f}".format(fit.alpha))
fig.savefig("doc/fig/powerlaw.png", dpi=600)
